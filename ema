import ccxt
import pandas as pd
import asyncio
import nest_asyncio
import requests
import config1  # Updated to config1
from datetime import datetime, timezone

interval = '1d'  # Time interval for candlesticks

# Initialize bybit client
bybit = ccxt.bybit({
    'apiKey': config1.API_KEY,  # Updated to config1
    'secret': config1.API_SECRET,  # Updated to config1
})

# Dictionary to store the last alert messages for each symbol
last_alert_messages = {}
position_status = {}  # Dictionary to store the position status (long, short, or none) for each symbol

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=50):
    ohlcv = bybit.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    return df

# Function to calculate EMA
def calculate_ema(df, period):
    return df['close'].ewm(span=period, adjust=False).mean()

# Function to check EMA crossover and exit conditions
def check_ema_conditions(df, short_period=2, long_period=20):
    # Calculate short-term and long-term EMAs
    df['ema_short'] = calculate_ema(df, short_period)
    df['ema_long'] = calculate_ema(df, long_period)

    # Check for entry conditions (cross_over: enter long, cross_under: enter short)
    cross_over = df['ema_short'].iloc[-1] > df['ema_long'].iloc[-1] and df['ema_short'].iloc[-2] <= df['ema_long'].iloc[-2]
    cross_under = df['ema_short'].iloc[-1] < df['ema_long'].iloc[-1] and df['ema_short'].iloc[-2] >= df['ema_long'].iloc[-2]

    # Check for exit conditions (exit_long: exit long, exit_short: exit short)
    exit_long = df['ema_short'].iloc[-1] < df['ema_long'].iloc[-1]  # Exit long if short EMA drops below long EMA
    exit_short = df['ema_short'].iloc[-1] > df['ema_long'].iloc[-1]  # Exit short if short EMA rises above long EMA

    return cross_over, cross_under, exit_long, exit_short

# Function to send a message to 3commas using a webhook
def send_3commas_message(symbol, action, close_price):
    if last_alert_messages.get(symbol) != action:
        timestamp = datetime.now(timezone.utc).isoformat()
        payload = {
            "secret": config1.SECRET,  # Updated to config1
            "max_lag": "300",
            "timestamp": timestamp,
            "trigger_price": str(close_price),
            "tv_exchange": "Bybit",
            "tv_instrument": symbol.replace('/', '') + '.P',
            "action": action,
            "bot_uuid": "00830f96-c475-4c3e-9e38-9a4495e3b78c"
        }

        try:
            url = config1.THREE_COMMAS_WEBHOOK_URL  # Updated to config1
            response = requests.post(url, json=payload)

            if response.status_code == 200:
                print(f"Successfully sent alert for {symbol} with action {action}")
                last_alert_messages[symbol] = action
            else:
                print(f"Failed to send alert for {symbol}: {response.content}")

        except requests.RequestException as e:
            print(f"Error sending request for {symbol}: {e}")

# Main function (now defined as async)
async def main():
    while True:
        for symbol in config1.SELECTED_SYMBOLS:  # Updated to config1
            try:
                # Fetch historical data for each symbol (we fetch 300 candles to ensure we have enough data for the 200-period EMA)
                historical_data = get_historical_data(symbol, interval)
                
                # Check EMA entry and exit conditions
                cross_over, cross_under, exit_long, exit_short = check_ema_conditions(historical_data)

                close_price = historical_data['close'].iloc[-1]

                # Check if we're in a long, short, or no position
                current_position = position_status.get(symbol, 'none')

                # Long entry and exit
                if current_position == 'none' and cross_over:
                    send_3commas_message(symbol, "enter_long", close_price)
                    position_status[symbol] = 'long'
                elif current_position == 'long' and exit_long:
                    send_3commas_message(symbol, "exit_long", close_price)
                    position_status[symbol] = 'none'

                # Short entry and exit
                if current_position == 'none' and cross_under:
                    send_3commas_message(symbol, "enter_short", close_price)
                    position_status[symbol] = 'short'
                elif current_position == 'short' and exit_short:
                    send_3commas_message(symbol, "exit_short", close_price)
                    position_status[symbol] = 'none'

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        # Sleep for a while before checking again
        await asyncio.sleep(3600)  # Sleep for 5 minutes (in seconds)

# Use nest_asyncio to allow running asyncio in Jupyter notebooks
nest_asyncio.apply()

# Create and run the event loop
asyncio.run(main())
