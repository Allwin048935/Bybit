import ccxt
import pandas as pd
import asyncio
import nest_asyncio
import requests
import config
from datetime import datetime, timezone, timedelta
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext

interval = '5m' 

# Initialize bybit client
bybit = ccxt.bybit({
    'apiKey': config.API_KEY,
    'secret': config.API_SECRET,
})

# Dictionary to store the last alert messages for each symbol
last_alert_messages = {}

# Store the selected symbols and reset date
selected_symbols = []
last_reset_date = datetime.now()

# Function to get historical candlestick data
def get_historical_data(symbol, interval, limit=20):
    ohlcv = bybit.fetch_ohlcv(symbol, interval, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'close', 'volume'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)
    return df

# Function to get day open price
def get_day_open_price(symbol):
    day_ohlcv = bybit.fetch_ohlcv(symbol, '1d', limit=3)
    df_day = pd.DataFrame(day_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df_day['timestamp'] = pd.to_datetime(df_day['timestamp'], unit='ms')
    df_day.set_index('timestamp', inplace=True)
    # Get the open price of the latest day candle
    day_open_price = df_day['close'].iloc[-2]
    return day_open_price

# Function to calculate SMA
def calculate_sma(df, period):
    return df['close'].rolling(window=period).mean()

# Function to check SMA crossover against day open price
def check_sma_crossover_vs_day_open(df, day_open_price, short_period=2):
    df['sma_short'] = calculate_sma(df, short_period)
    cross_over = df['sma_short'].iloc[-2] > day_open_price
    cross_under = df['sma_short'].iloc[-2] < day_open_price
    return cross_over, cross_under

# Function to get previous day's amplitude ratio
def get_previous_day_amplitude(symbol):
    daily_ohlcv = bybit.fetch_ohlcv(symbol, '1d', limit=5)
    df_daily = pd.DataFrame(daily_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
    df_daily['timestamp'] = pd.to_datetime(df_daily['timestamp'], unit='ms')
    df_daily.set_index('timestamp', inplace=True)
    
    # Get the amplitude of the previous day
    prev_day_high = df_daily['high'].iloc[-2]
    prev_day_low = df_daily['low'].iloc[-2]
    
    # Calculate amplitude ratio (high/low)
    amplitude_ratio = prev_day_high / prev_day_low
    return amplitude_ratio

# Function to send a message to 3commas using a webhook for two different bots and secrets
def send_3commas_message(symbol, action, close_price, bot_uuid, secret):
    if last_alert_messages.get(symbol) != action:
        timestamp = datetime.now(timezone.utc).isoformat()
        payload = {
            "secret": secret,
            "max_lag": "300",
            "timestamp": timestamp,
            "trigger_price": str(close_price),
            "tv_exchange": "bybit",
            "tv_instrument": symbol.replace('/', '') + '.P',
            "action": action,
            "bot_uuid": bot_uuid
        }

        try:
            url = config.THREE_COMMAS_WEBHOOK_URL
            response = requests.post(url, json=payload)

            if response.status_code == 200:
                print(f"Successfully sent alert for {symbol} with action {action} to bot {bot_uuid}")
                last_alert_messages[symbol] = action
            else:
                print(f"Failed to send alert for {symbol} to bot {bot_uuid}: {response.content}")

        except requests.RequestException as e:
            print(f"Error sending request for {symbol} to bot {bot_uuid}: {e}")

# Telegram bot command to set symbols
def set_symbols(update: Update, context: CallbackContext) -> None:
    global selected_symbols
    # Extract symbols from the user's message
    user_symbols = context.args
    if user_symbols:
        selected_symbols = [symbol.upper() for symbol in user_symbols]
        update.message.reply_text(f"Symbols updated: {', '.join(selected_symbols)}")
    else:
        update.message.reply_text("Please provide symbols. Usage: /set_symbols BTC/USDT ETH/USDT")

# Function to handle unknown commands
def unknown(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(f"Sorry, I didn't understand that command.")

# Main function (now defined as async)
async def main():
    global selected_symbols, last_reset_date
    
    while True:
        # Reset selected symbols every two days
        if datetime.now() >= last_reset_date + timedelta(days=2):
            last_reset_date = datetime.now()
            print(f"Selected symbols reset: {selected_symbols}")

        for symbol in selected_symbols:
            try:
                # Fetch historical data and day open price only once per symbol
                historical_data = get_historical_data(symbol, interval)
                day_open_price = get_day_open_price(symbol)
                cross_over, cross_under = check_sma_crossover_vs_day_open(historical_data, day_open_price)

                close_price = historical_data['close'].iloc[-1]

                # Get amplitude ratio for the previous day
                amplitude_ratio = get_previous_day_amplitude(symbol)

                # Print the amplitude ratio
                print(f"Amplitude ratio for {symbol}: {amplitude_ratio}")

                # Check if the amplitude ratio condition is met (minimum 1.1 for 10% change)
                if amplitude_ratio >= 1.25:
                    # Determine the action based on SMA crossover compared to day open price
                    if cross_over:
                        send_3commas_message(symbol, "enter_long", close_price, "03b92596-8b5c-4e57-839e-6e980ba0e671", config.SECRET_1)
                        send_3commas_message(symbol, "enter_long", close_price, "00830f96-c475-4c3e-9e38-9a4495e3b78c", config.SECRET_2)
                    elif cross_under:
                        send_3commas_message(symbol, "enter_short", close_price, "03b92596-8b5c-4e57-839e-6e980ba0e671", config.SECRET_1)
                        send_3commas_message(symbol, "enter_short", close_price, "00830f96-c475-4c3e-9e38-9a4495e3b78c", config.SECRET_2)
                else:
                    print(f"Amplitude condition not met for {symbol}, skipping...")

            except Exception as e:
                print(f"Error processing {symbol}: {e}")

        # Sleep for 5 minutes before checking again
        await asyncio.sleep(300)

# Setup Telegram bot
def start_telegram_bot():
    updater = Updater(token=8066951467:AAHOaFDL9kixcdwtjbwb-szDgnl8R9Vz8AI, use_context=True)
    dispatcher = updater.dispatcher

    # Command to set symbols
    dispatcher.add_handler(CommandHandler("set_symbols", set_symbols))
    # Unknown command handler
    dispatcher.add_handler(CommandHandler("unknown", unknown))

    # Start the bot
    updater.start_polling()

# Run both Telegram bot and the async trading process
if __name__ == '__main__':
    # Start the Telegram bot
    start_telegram_bot()

    # Use nest_asyncio to allow running asyncio in Jupyter notebooks
    nest_asyncio.apply()

    # Create and run the event loop
    asyncio.run(main())
